FORMAT: 1A
HOST: http://chestnok.apiblueprint.org/

# Chestnok Website API
> *Documentation written in english to stay in consistenct with common standarts*

API documentation for Android Application **«Чес(т)нок. Грузы»** *(draft name for the first stage)*

## Helpful info
* [Working API on production site](https://cesnok.ru/owner)
* [Client's Info](https://www.dropbox.com/sh/vvrnzvyuri0t0lh/AABrm2m1Mfijp_eNGx0L1WiFa?dl=0)

## Credentials
Current API is located on `chesnok.ru` website under following links:

* https://cesnok.ru/api/internal/data — общий запрос на все данные
* https://cesnok.ru/api/internal/request/14525 — запрос на конкретную заявку
* https://cesnok.ru/api/internal/data — для патча от определенной временной отметки **(POST)**
    * **Alias:** https://cesnok.ru/api/internal/patch?version=1547810398 **(GET)**

# Data Structures

## Request (object)

+ id: 123 (number, required)
+ origin_id: 45 (number, required)
    identifier of loading's point nearest locality
+ destination_id: 78 (number, required)
    identifier of destination's point nearest locality
+ category_id: 13 (number, required)
    identifier of truck
+ distance: 567.2 (number, required)
    route length in kilometers
+ date_from: `2018.12.24 23:00:00` (string, required)
    Pickup is avaluable from this date (with hour-accuracy)
+ date_to: `2018.12.24 23:00:00` (string, required)
    Pickup is avaluable till this date (with hour-accuracy)
+ delivery_time: `14 дней 2 часа` (string, required)
    estimated delivery time in hours in human-readable format
+ weight: 1.1 (number, required)
    cargo weight in tonns
+ volume: 5.2 (number, required)
    cargo volume in Cubic Meters
+ cargo_description: `Пластик в мешках` (string, required)
    cargo description
+ cargo_special: `Верхняя,Боковая,Снятие стоек` (string)
    cargo special conditions (usually loading type)
+ price_vat: 13900 (number)
    total price in RUB with VAT included
+ price: 11120 (number)
    total price in RUB without VAT included
+ rate_vat: 24.50 (number)
    price per kilometer in RUB with VAT
+ rate: 19.6 (number)
    price per kilometer in RUB without VAT
+ office_id: 2 (number)
    responsible office identifier
+ status: `active` (enum[string])

    Request status
    
    + Members
        + `active`
        + `updated`
        + `in_progress`
        + `closed`
        + `canceled`
        + `failed`
        
+ created_at: `2018.12.24 23:10:10` (string)
    Date and time of transportation request
+ updated_at: `2018.12.24 23:10:10` (string)
    Date and time of last updated

## User (object)

+ id: 123 (number, required)
+ email: `test@cesnok.ru` (string, required)
    Valid email address
+ inn: 1234567890 (number)
    10 *(for the individual entrepreneur)* or 12 *(for LLC)*
+ created_at: `2018.12.24 23:10:10` (string, required)
    Registration Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last profile update Date and Time. Default value is equal to created_at property
+ approved_at: `2018.12.24 23:10:10` (string)
    Date and time of approval confirmation from the Office

## Office (object)

+ id: 2 (number, required)
+ phone: `+7 (095) 123-45-78` (string, required)
+ name: `Диспетчерская «Казань»` (string, required)
+ geodata
    + lat (number, required)
    + lon (number, required)
    + radius (number, required)
+ is_default: false (boolean)
    Default Office located in Moscow — it's the one deault office.
+ is_active: true (boolean)
    State of office — is active or not
+ created_at: `2018.12.24 23:10:10` (string, required)
    Open Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last info update Date and Time

# Group User

> **Important notice!!! For server-side only!**

Group is used to:

* Check and get user data
* Request password reset email

## Check credentials  [/user]

Main purpose of this methods is to check if user with such credentials exists and retrieve his data from API.

### Get user by credentials [POST]

+ Request (application/json)

    + Attributes
        + email: `test@cesnok.ru` (required,string)
            Valid email address
        + password: `qwerty` (required,string)
            Valid password for the account on https://cesnok.ru

+ Response 200 (application/json)

    Return

    + Attributes (User)
    
## Remind password [/user/remind]

### Request password recovery [POST]

Sends recovery email to user's email.

+ Request (application/json)

    + Attributes
        + email: `test@cesnok.ru` (required,string)
            Valid email address

+ Response 200 (application/json)

# Group Data

To provide offline mode possibility application downloads all requests and offices info from server within one method.
Data-usage flow looks like this:
* During **first-launch** application grabs all data from server and store it internaly with version of this data.
* In case Android is connected to the Internet, each **1 minute** (*period is a subject of discussion*) application checks for new data and downloads the difference.
* If Android stayed offline for more then period, when application finally appear online — it momentaly tries to grab the last differece of data comparing to the previous version.

> **Important! Application needs only the difference — requests or offices which were added, removed or changed during the offline period**

## Data request path [/data]

Request application data

### Grab all data [GET]

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes
    
        + office_list (required, Office[])
        + request_list (required, Request[])
        + version: `1545984306` (required, number)
            Version is a timestamp of last office and request provision


### Request data difference [POST]

+ Request (application/json)
    
    + Headers

            Authorization: {token}
            Accept-Charset: utf-8
    
    + Attributes
    
        + version: 1545984306 (number)
            Last received data version (to calculate the difference)

    

+ Response 200 (application/json)

    + Attributes
    
        + office_list (array[Office])
        + request_list (array[Request])
        + version: `1545984306` (number)
            Version is a timestamp of last office and request provision


# Group Request

Basically requests can be filtered, found and even read by Voice Assistant offline.
Despite this fact there are 2 cases when application needs to communicate with server onbehalf Request.

> **Important! Any request update can be possible if the App has an active internet connection.**
> **Otherwise App handle it offline.**

1. Check the actual Request status before allowing User to apply.
2. Apply to the Request online.

## Request path [/request/{id}]

+ Parameters
    + id (required,number) - Request ID

### Update request status and info [GET]

Checking Request data before doing any actions to make sure Request is stil avaluable.

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes (Request)