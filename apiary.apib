FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Chestnok Application API
> *Documentation written in english to stay in consistenct with common standarts*



# Group User

In general application doesn't allow any usage without authentification.

Sequence of actions depends on client flow and is covered by exhaustive variety of scenarios below:
* **Client opened the app for the very first time**:
    1. **POST:** `/user/letmein` User is required to fulfil only phone number field to login or register;
    2. *Server validates phone and sends User sms with special code to verify*;
    3. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    4. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    5. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;
* **Client has had account on cesnok.ru**:
    1. **POST:** `/user/convert` To convert website profile into app profile user is expected to input email and password used to authentificate him on the website;
    2. **POST:** `/user/phone` Valid phone number is required to finish process of convertion account;
    3. *Server validates phone and sends User sms with special code to verify*;
    4. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    5. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    6. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;

## Profile [/user]

+ Attributes (User)

### Get profile info [GET]

+ Request (application/json)

    + Header

            Authorization: {token}
            Accept-Charset: utf-8
    
+ Response 200 (application/json)

    + Attributes (User)

### Update profile info [POST]

Despite sending whole User object there is only two editable fields:
* email
* inn

This fields can be updated only in case user has no stored inn or email.
**There is no possibility to changes once stored information.**

+ Request (application/json)

    + Attributes (User)
    
+ Response 200 (application/json)

    + Attributes (User)


## Login or register [/user/letmein]

Application can authentificate user only by phone-number.
It can be achieved with help of sms-codes.
To avoid useless waste of money authorisation token with unlimited term of valiability

+ Request (application/json)

    + Attributes
        — phone: `+7 (095) 123-45-67` (string)
            Valid russian mobile phone number

+ Response 200 (application/json)

    + Attributes
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session
            
## SMS handling [/user/sms]

SMS-sending depends on 

### Confirm authentification [POST]

+ Request (application/json)

    + Attributes
        — phone: `+7 (095) 123-45-67` (string)
            Valid russian mobile phone number
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session
        — code: 124232 (number)
            6-digits verification code from sms-message
    
+ Response 200 (application/json)
    + Attributes (User)

### Repeat code request [GET]

+ Request (application/json)

    + Attributes
        — phone: `+7 (095) 123-45-67` (string)
            Valid russian mobile phone number
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session

+ Response 200 (application/json)

    + Attribute
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session

## Convert profile [/user/convert]

+ Request (application/json)

    + Attributes
        — phone: `+7 (095) 123-45-67` (string)
            Valid russian mobile phone number
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session

+ Response 200 (application/json)

    + Attribute
        — auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session

# Group Data

## Data request path [/data]

### Grap all data [GET]

+ Request (application/json)

    + Header

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attribute
        — office_list: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session


### Request data difference [POST]

# Group Request

Application 





## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }

# Data Structures

## User (object)

### Properties
+ id: 123 (number)
+ phone: `+7 (095) 123-45-78` (string, required)
    Russian mobile phone number
+ email: test@cesnok.ru (string) 
    Valid email address
+ inn: 1234567890 (number)
    10 *(for the individual entrepreneur)* or 12 *(for LLC)*
+ is_confirmed: false (boolean, required)
    User confirmed his phone number
+ is_approved: false (boolean, required)
    Office approves user to be transporter 
+ is_professional: false (boolean, required)
    User has at least one finished request
+ created_at: `2018.12.24 23:10:10` (string, required)
    Registration Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last profile update Date and Time. Default value is equal to created_at property 
+ approved_at: `2018.12.24 23:10:10` (string)
    Date and time of approval confirmation from the Office

## Office (object)

## Request (object)

## Photo (object)