FORMAT: 1A
HOST: http://chestnok.apiblueprint.org/

# Chestnok Website API
> *Documentation written in english to stay in consistenct with common standarts*

API documentation for Android Application **«Чес(т)нок. Грузы»** *(draft name for the first stage)*

## Helpful info
* [Working API on production site](https://cesnok.ru/owner)
* [Client's Info](https://www.dropbox.com/sh/vvrnzvyuri0t0lh/AABrm2m1Mfijp_eNGx0L1WiFa?dl=0)

## Credentials
Current API is located on `chesnok.ru` website under following links:

* https://cesnok.ru/api/internal/data — общий запрос на все данные
* https://cesnok.ru/api/internal/request/14525 — запрос на конкретную заявку
* https://cesnok.ru/api/internal/data — для патча от определенной временной отметки **(POST)**
    * **Alias:** https://cesnok.ru/api/internal/patch?version=1547810398 **(GET)**

# Data Structures

## Request (object)

+ id: 123 (number, required)
+ origin_id: 45 (number, required)
    identifier of loading's point nearest locality
+ destination_id: 78 (number, required)
    identifier of destination's point nearest locality
+ category_id: 13 (number, required)
    identifier of truck
+ distance: 567.2 (number, required)
    route length in kilometers
+ date_from: `2018.12.24 23:00:00` (string, required)
    Pickup is avaluable from this date (with hour-accuracy)
+ date_to: `2018.12.24 23:00:00` (string, required)
    Pickup is avaluable till this date (with hour-accuracy)
+ delivery_time: `14 дней 2 часа` (string, required)
    estimated delivery time in hours in human-readable format
+ weight: 1.1 (number, required)
    cargo weight in tonns
+ volume: 5.2 (number, required)
    cargo volume in Cubic Meters
+ cargo_description: `Пластик в мешках` (string, required)
    cargo description
+ cargo_special: `Верхняя,Боковая,Снятие стоек` (string)
    cargo special conditions (usually loading type)
+ price_vat: 13900 (number)
    total price in RUB with VAT included
+ price: 11120 (number)
    total price in RUB without VAT included
+ rate_vat: 24.50 (number)
    price per kilometer in RUB with VAT
+ rate: 19.6 (number)
    price per kilometer in RUB without VAT
+ office_id: 2 (number)
    responsible office identifier
+ status: `active` (enum[string])

    Request status
    
    + Members
        + `active`
        + `updated`
        + `in_progress`
        + `closed`
        + `canceled`
        + `failed`
        
+ created_at: `2018.12.24 23:10:10` (string)
    Date and time of transportation request
+ updated_at: `2018.12.24 23:10:10` (string)
    Date and time of last updated

## User (object)

+ id: 123 (number, required)
+ phone: `+7 (095) 123-45-78` (string, required)
    Russian mobile phone number
+ email: test@cesnok.ru (string)
    Valid email address
+ inn: 1234567890 (number)
    10 *(for the individual entrepreneur)* or 12 *(for LLC)*
+ is_confirmed: false (boolean, required)
    User confirmed his phone number
+ is_approved: false (boolean, required)
    Office approves user to be transporter
+ is_professional: false (boolean, required)
    User has at least one finished request
+ created_at: `2018.12.24 23:10:10` (string, required)
    Registration Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last profile update Date and Time. Default value is equal to created_at property
+ approved_at: `2018.12.24 23:10:10` (string)
    Date and time of approval confirmation from the Office

## Office (object)

+ id: 2 (number, required)
+ phone: `+7 (095) 123-45-78` (string, required)
+ name: `Диспетчерская «Казань»` (string, required)
+ geodata
    + lat (number, required)
    + lon (number, required)
    + radius (number, required)
+ is_default: false (boolean)
    Default Office located in Moscow — it's the one deault office.
+ is_active: true (boolean)
    State of office — is active or not
+ created_at: `2018.12.24 23:10:10` (string, required)
    Open Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last info update Date and Time

## Photo (object)

+ id: 24 (number, required)
+ user_id: 123 (number, required)
    User identifier
+ type (required, enum[string])

    Type of photo to process

    + Members
        + `passport`
        + `passport_address`
        + `driver_license_face`
        + `driver_license_back`
        + `truck_license_back`
        + `selfie`
        + `trailer_license`
        + `vin_code`
        + `insurance`

+ filesize: 1567 (number)
    Filesize in kilobytes (in case file is uploaded)
+ filetype: `image/gif` (string)
    File Mime type (in case file is uploaded)
+ data (string) 
    base64 encoded data (in case file is uploaded)
+ status: `uploaded` (required, enum[string])

    Photo status
    
    + Members
        + `uploaded`
        + `approved`
        + `rejected`
        + `on_moderation`
        + `canceled`

+ url (string)
    URL to download image from static server (in case file was transfered to Server before)
+ created_at: `2018.12.24 23:10:10` (string, required)
    First upload Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last upload Date and Time. Default value is equal to created_at property
+ moderated_at: `2018.12.24 23:10:10` (string)
    Date and time of moderation confirmation from the Office

# Group User
In general application doesn't allow any usage without authentification.

Sequence of actions depends on client flow and is covered by exhaustive variety of scenarios below:
* **Client opened the app for the very first time**:
    1. **POST:** `/user/letmein` User is required to fulfil only phone number field to login or register;
    2. *Server validates phone and sends User sms with special code to verify*;
    3. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    4. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    5. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;
* **Client has had account on cesnok.ru**:
    1. **POST:** `/user/convert` To convert website profile into app profile user is expected to input email and password used to authentificate him on the website;
    2. **POST:** `/user/phone` Valid phone number is required to finish process of convertion account;
    3. *Server validates phone and sends User sms with special code to verify*;
    4. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    5. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    6. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;

## User profile handling [/user]

### Get user profile info [GET]
    Despite sending whole User object while updating the profile there is only two editable fields — **email** and **inn**.
    This fields can be updated only in case user has no previously stored values.
    **There is no possibility to changes once stored information.**

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes (User)

### Update profile info [POST]
    
+ Request (application/json)

    + Headers
    
            Authorization: {token}
            Accept-Charset: utf-8

    + Attributes (User)

+ Response 200 (application/json)

## Application auth [/user/letmein]
Application can authentificate user only by phone-number.
It can be achieved with help of sms-codes.
To avoid useless waste of money authorisation token with unlimited term of valiability.

## Login or register [POST]

+ Request (application/json)

    + Attributes
        + phone: `+7 (095) 123-45-67` (string)
            Valid russian mobile phone number

+ Response 200 (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of current authentification session
        + is_registered: true (string)
            due to both login and register functional server responding with registered flag

## SMS processing [/user/sms] 
Sms processing — application sends both phone and auth-session data to keep auth session.

### Request repeated code [GET]

+ Request (application/json)

    + Attributes
        + phone: `+7 (095) 123-45-67` (required, string)
            Valid russian mobile phone number
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session

+ Response 200 (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session
            
### Send code to validate request [POST]

+ Request (application/json)

    + Attributes
        + phone: `+7 (095) 123-45-67` (required,string)
            Valid russian mobile phone number
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session
        + code: 124232 (required,number)
            6-digits verification code from sms-message

+ Response 200 (application/json)
    
    + Attributes (User)

## Convert profile [/user/convert]

Method to login with email and password from cesnok.ru account

### Login with email and password [POST]

+ Request (application/json)

    + Attributes
        + email: `test@cesnok.ru` (required,string)
            Valid email address
        + password: `qwerty` (required,string)
            Valid password for the account on https://cesnok.ru

+ Response 200 (application/json)

    + Attributes
    
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (string)
            32-symbol code of curren authentification session

# Group Data

To provide offline mode possibility application downloads all requests and offices info from server within one method.
Data-usage flow looks like this:
* During **first-launch** application grabs all data from server and store it internaly with version of this data.
* In case Android is connected to the Internet, each **1 minute** (*period is a subject of discussion*) application checks for new data and downloads the difference.
* If Android stayed offline for more then period, when application finally appear online — it momentaly tries to grab the last differece of data comparing to the previous version.

> **Important! Application needs only the difference — requests or offices which were added, removed or changed during the offline period**

## Data request path [/data]

Request application data

### Grab all data [GET]

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes
    
        + office_list (required, Office[])
        + request_list (required, Request[])
        + version: `1545984306` (required, number)
            Version is a timestamp of last office and request provision


### Request data difference [POST]

+ Request (application/json)
    
    + Headers

            Authorization: {token}
            Accept-Charset: utf-8
    
    + Attributes
    
        + version: 1545984306 (number)
            Last received data version (to calculate the difference)

    

+ Response 200 (application/json)

    + Attributes
    
        + office_list (array[Office])
        + request_list (array[Request])
        + version: `1545984306` (number)
            Version is a timestamp of last office and request provision


# Group Request

Basically requests can be filtered, found and even read by Voice Assistant offline.
Despite this fact there are 2 cases when application needs to communicate with server onbehalf Request.

> **Important! Any request update can be possible if the App has an active internet connection.**
> **Otherwise App handle it offline.**

1. Check the actual Request status before allowing User to apply.
2. Apply to the Request online.

## Request path [/request/{id}]

+ Parameters
    + id (required number) - Request ID

### Update request status and info [GET]

Checking Request data before doing any actions to make sure Request is stil avaluable.

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes (Request)

### Apply to Request [POST]

+ Request (application/json)

    + Headers

            Authorization: {token}
            Accept-Charset: utf-8

+ Response 200 (application/json)

    + Attributes
        + request (Request)
            Updated Request object
        + message: "Ваша заявка получена. Скоро с вами свяжется оператор!" (string)
            Success message

# Group Photos

To save time and be able to apply for requests faster App offers Photos feature.

> **Important! User should input correct INN and upload 10 photos (1, insurance is optional).**

After 1 business day or faster User will receive conformation.
After it User can sign contracts much faster and feel save about getting the job and cargo.

Process of approval is splitted into three steps:
1. Uploading photos and saving INN-number.
2. Getting first approval from Office that photos are made correctly and have enough quality.
3. Get the approval from security department and insurance company.

## Photos processing [/photo/{type}]

+ Parameters
    
    + type (required, enum[string])

        Type of photo to process

        + Members
            + `passport`
            + `passport_address`
            + `driver_license_face`
            + `driver_license_back`
            + `truck_license_back`
            + `selfie`
            + `trailer_license`
            + `vin_code`
            + `insurance`

### Uploading photo [POST]

Some uploading process here

+ Attributes (Photo)

+ Request

    + Headers

            Content-Type: "multipart/form-data, boundary=AaB03x"
            Authorization: {token}
            Connection: keep-alive
            Accept-Charset: utf-8
            
    + Attributes (Photo)

+ Response 200 (application/json)
    
    + Attributes (Photo)

### Get photo status [GET]

+ Request (multipart/form-data, boundary=AaB03x)

    + Header

            Authorization: {token}
            Connection: keep-alive
            Accept-Charset: utf-8

+ Response 200 (application/json)
    
    + Attributes (Photo)